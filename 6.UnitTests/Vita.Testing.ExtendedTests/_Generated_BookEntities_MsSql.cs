
/* 
  This file was automatically generated by VITA reverse-engineering tool from the database.
  Generated date/time: 2017-12-18T10:09:16
*/
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data; 

using Vita.Entities;
using Vita.Entities.Caching;
using Vita.Data;  // used only in console app

namespace Vita.Samples.BooksGenerated {
// Module : EntityModuleBooks --------------------------------

  public interface Object {

    [Column("Id")]
    Guid Id { get; set; }

    [Column("CreatedOn"), Utc, Auto(AutoType.CreatedOn)]
    DateTime CreatedOn { get; }

    [Column("Title", Size = 120)]
    string Title { get; set; }

    [Column("Description", Size = 250), Nullable]
    string Description { get; set; }

    [Column("PublishedOn"), Utc]
    DateTime? PublishedOn { get; set; }

    [Column("Abstract"), Unlimited, Nullable]
    string Abstract { get; set; }

    [Column("Category")]
    int Category { get; set; }

    [Column("Editions")]
    int Editions { get; set; }

    [Column("Price", Scale = 4, Precision = 18)]
    Decimal Price { get; set; }

    [Column("Publisher_Id")]
    Guid PublisherId { get; set; }

    [Column("CoverImage_Id")]
    Guid? CoverImageId { get; set; }

    [Column("Editor_Id")]
    Guid? EditorId { get; set; }
  }


  public interface Object {

    [Column("FirstName", Size = 50), Nullable]
    string FirstName { get; set; }

    [Column("LastName", Size = 50)]
    string LastName { get; set; }

    [Column("UserName", Size = 50), Nullable]
    string UserName { get; set; }

    [Column("UserType")]
    Int32? UserType { get; set; }
  }

  public interface Object {

    [Column("Id"), UniqueClusteredIndex]
    Guid Id { get; set; }

    [Column("Title", Size = 120), Index]
    string Title { get; set; }

    [Column("Count")]
    Int32? Count { get; set; }

    [Column("Publisher", Size = 50)]
    string Publisher { get; set; }

    [Column("Total")]
    Decimal? Total { get; set; }

    [Column("_lineCount")]
    Int64? LineCount { get; set; }
  }

  public interface Object {

    [Column("Id")]
    Guid Id { get; set; }

    [Column("Title", Size = 120)]
    string Title { get; set; }

    [Column("Publisher", Size = 50)]
    string Publisher { get; set; }

    [Column("Count")]
    Int32? Count { get; set; }

    [Column("Total")]
    Decimal? Total { get; set; }
  }

  public interface Object {

    [Column("Id")]
    Guid Id { get; set; }

    [Column("CreatedOn"), Utc, Auto(AutoType.CreatedOn)]
    DateTime CreatedOn { get; }

    [Column("Title", Size = 120)]
    string Title { get; set; }

    [Column("Description", Size = 250), Nullable]
    string Description { get; set; }

    [Column("PublishedOn"), Utc]
    DateTime? PublishedOn { get; set; }

    [Column("Abstract"), Unlimited, Nullable]
    string Abstract { get; set; }

    [Column("Category")]
    int Category { get; set; }

    [Column("Editions")]
    int Editions { get; set; }

    [Column("Price", Scale = 4, Precision = 18)]
    Decimal Price { get; set; }

    [Column("Publisher_Id")]
    Guid PublisherId { get; set; }

    [Column("CoverImage_Id")]
    Guid? CoverImageId { get; set; }

    [Column("Editor_Id")]
    Guid? EditorId { get; set; }
  }

  // -------------------  Entity modules --------------------------------------
  public class EntityModuleBooks : EntityModule {
    public static readonly Version CurrentVersion = new Version("1.0.0.0");
 
    public EntityModuleBooks (EntityArea area) : base(area, "EntityModuleBooks", version: CurrentVersion) {
      base.RegisterEntities(
            typeof(Object));
    }
  }

  // -------------------  Entity App --------------------------------------
  public class BookStoreApp : EntityApp {
    public BookStoreApp () {
      var areaBooks = this.AddArea("books", "books");
      ModuleBooks = new EntityModuleBooks(areaBooks);
    }

    public readonly EntityModuleBooks ModuleBooks;
  }


  
  // Sample Program class for a Console application. Add references to Vita assembly
  // using Vita.Entities;
  // using Vita.Entities.Caching;
  // using Vita.Data;

  class Program {
    public static BookStoreApp App;

    static void Main(string[] args) {
      Console.WriteLine(" Sample application for VITA-generated model. ");
      Init();
      
      //Open session and run query
      var session = App.OpenSession();
      var query = from ent in session.EntitySet<Object>()  // just random entity
                  // where ?condition?
                  select ent;
      var entities = query.Take(5).ToList();

      Console.WriteLine("Loaded " + entities.Count + " entities.");
      foreach(var ent in entities)
        Console.WriteLine("  Entity: " + ent.ToString()); // change to smth more meaningful 

      Console.WriteLine("Press any key ...");
      Console.ReadKey();
    }
    
    private static void Init() {
      App = new BookStoreApp();
      // Cache settings. If you do not add any types, cacheSettings will be ignored
      App.CacheSettings.AddCachedTypes(CacheType.FullSet /* , <fully cached entity types> */ );
      App.CacheSettings.AddCachedTypes(CacheType.Sparse /* , <sparsely cached entity types> */ );
      //connect to database
      var connString = @"Data Source=.;Initial Catalog=VitaTest;Integrated Security=True";
      var driver = new Vita.Data.MsSql.MsSqlDbDriver();
      App.LogPath = "_appLog.log";
      var dbSettings = new DbSettings(driver, DbOptions.Default, connString, upgradeMode: DbUpgradeMode.Always);
      App.ConnectTo(dbSettings);
    }
  }

}
